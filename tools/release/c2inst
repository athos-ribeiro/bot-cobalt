#!perl
my $version = '0.11';

use 5.12.1;
use strict;
use warnings;
use Carp;
use JSON;

use Cobalt::Utils qw/ rplprintf /;

STDOUT->autoflush(1);

my $rcfile = $ENV{HOME} . "/.cobalt2rc";

use Getopt::Long;
GetOptions(

  version => sub {
    say "$0 $version";
    exit 0
   },

  help => sub {
    print(
      "$0 $version\n\n",
      "Options:\n",
      "  -c, --rcfile=PATH    Path to cobalt2 rcfile\n",
      "                       [default: $rcfile]\n",
    );
    exit 0
   },


  'rcfile=s' => \$rcfile,
  'config=s' => \$rcfile,
);


sub _deserialize_etc {
  my $json;
  {  local $/ ; $json = <DATA>;  }
  my $ref = decode_json $json; 
  return ref $ref eq 'HASH' ? $ref : () ;
}

sub _slurp {
  my ($path) = @_;
  my $str;
  open(my $fh, '<', $path) or croak "failed file read: $path: $!" ;
  {  local $/ ; $str = <$fh>;  }
  close($fh) or carp "failed to close $path: $!";
  return $str
}

sub _ans {
  ## f.ex: my $default_yes = _ans(my $in = <STDIN>, 'Y')
  my ($stdin, $default) = @_;
  chomp($stdin);
  $stdin = $stdin ? $stdin : $default ;
  return unless $stdin =~ /^Y/i;
}

## RC_* funcs
sub RC_Read {
  ## Read the current $rcfile
  my $str = _slurp($rcfile);
  my ($BASE, $ETC, $VAR);
  eval $str;
  if ($@) {
    croak "Errors reported during rc parsing; $@";
  }
  return ($BASE, $ETC, $VAR);
}

sub RC_Write {
  my ($relative_base) = @_;
  ## Pass me a base path relative to $ENV{HOME} such as 'cobalt2'
  ## Writes a basic cobalt2rc to current value of $rcfile
  my $str = join "\n",
    '## cobalt2rc automatically generated at '.scalar localtime,
    '$BASE = $ENV{HOME} . "/'.$relative_base.'";' ,
    '$ETC = $BASE . "/etc";' ,
    '$VAR = $BASE . "/var";' ,
  ;

  open(my $fh, '>', $rcfile)
    or croak "failed to open $rcfile: $!";
  print $fh $str;
  close($fh) or carp "close failed for $rcfile: $!";

  say ">! wrote rcfile";
  say ">! ETC is: ". $ENV{HOME} ."/". $relative_base . "/etc" ;
  say ">! VAR is: ". $ENV{HOME} ."/". $relative_base . "/var" ;
  say ">! To change, edit $rcfile";
}


## Conf_* funcs

sub Conf_create_dir_structure {
  ## recursively scan the list of files
  ## create a list of dirs to check
  ## create them if they don't exist
}

sub Conf_write_confs {
  ## should have a vars hash for rplprintf and a dir structure
  ## write our deserialized confs back out
  ## run rplprintf against each file before writing
}


sub Conf_interactive {
  my $cf = {};

  print(
    "Interactively configuring basic cobalt2 opts.\n",
    "This installer only covers the most basic set of options.\n",
    "You should review etc/ yourself when finished.\n\n",
    "Defaults are shown [like this]\n\n",
  );


  say ">! Configuring cobalt.conf";

  say "  IRC OPTIONS";

  say "Bot's nickname [cobalt2] ";
  $cf->{CFG_BOT_NICK} = <STDIN>;
  chomp $cf->{CFG_BOT_NICK} ;
  $cf->{CFG_BOT_NICK} ||= 'cobalt2';

  say "Bot's username [cobalt] ";
  $cf->{CFG_BOT_USERNAME} = <STDIN>;
  chomp $cf->{CFG_BOT_USERNAME} ;
  $cf->{CFG_BOT_USERNAME} ||= 'cobalt';

  say "Bot's 'realname' [cobalt2 bot] ";
  $cf->{CFG_BOT_REALNAME} = <STDIN>;
  chomp $cf->{CFG_BOT_REALNAME} ;
  $cf->{CFG_BOT_REALNAME} ||= 'cobalt2 bot';

  say "Remote ServerAddr [irc.cobaltirc.org] ";
  $cf->{CFG_SERVER_ADDR} = <STDIN>;
  chomp $cf->{CFG_SERVER_ADDR} ;
  $cf->{CFG_SERVER_PORT} ||= 'irc.cobaltirc.org';

  say "Use SSL for this server? [y/N] ";
  my $usessl = _ans(my $in = <STDIN>, 'n');
  $cf->{CFG_USE_SSL} = $usessl ? 1 : 0 ;

  my $default_irc_port = $usessl ? 6697 : 6667 ;
  say "Remote port [$default_irc_port] ";
  $cf->{CFG_SERVER_PORT} = <STDIN>;
  chomp $cf->{CFG_SERVER_PORT} ;
  $cf->{CFG_SERVER_PORT} ||= $default_irc_port;

  say "You need to specify a command character for the bot.";
  say "This is used to prefix various plugin-provided commands.";
  say "Bot's command character [ ! ] ";
  $cf->{CFG_CMD_CHAR} = <STDIN>;
  chomp $cf->{CFG_CMD_CHAR};
  $cf->{CFG_CMD_CHAR} ||= '!' ;

  say ">! Done configuring cobalt.conf" ;
  say ">! There are many more opts; review the file!";

  # FIXME channels.conf
  # FIXME auth.conf
  # plugins.conf is probably fine with a suitable example file
}


## MAIN
print(
  "This is the cobalt2 install helper.\n",
  "This script will create a cobalt2rc file specifying install paths.\n",
  "It will also help you initialize some starter cobalt2 conf files.\n",
  "> Press ENTER to continue, Ctrl+C to quit.\n",
);
<STDIN>;

say "> using rcfile: $rcfile";

## prompt user for a rcfile path

## prompt user for a relative basedir

## install rcfile

## read back rcfile to determine var/etc paths

## try to create conf dir structure

## run interactive conf

## write confs
