#!/usr/bin/env perl
use 5.12.1;
use strict;
use warnings;

use Carp;

use File::Spec;
use File::Basename;
my @root;
my $lib;
BEGIN {
 @root = File::Spec->splitdir(dirname(__FILE__));
 $lib = File::Spec->rel2abs(join '/', @root, 'lib');
}
use lib $lib;

my $etc = File::Spec->rel2abs(join '/', @root, 'etc');
my $var = File::Spec->rel2abs(join '/', @root, 'var');

use Getopt::Long;
my $opt_debug = 0;
my $opt_detach = 0;
my $loglevel = 'info';

GetOptions(
  'help' => \&show_help,

  'version' => sub {
    require Cobalt::Core;
    print("cobalt $Cobalt::Core::VERSION\n"); 
    exit 0
  },

  'config=s' => \$etc,
  'etc=s'    => \$etc,
  'var=s' => \$var,

  'debug!'  => \$opt_debug,
  'detach!' => \$opt_detach,
  'daemon!' => \$opt_detach,

  'dumpconfig' => sub {
    require Cobalt::Conf;
    my $cfg = Cobalt::Conf->new(etc => $etc)->read_cfg;
    require Data::Dumper;
    no warnings;
    $Data::Dumper::Sortkeys = 1;
    $Data::Dumper::Useqq = 1;
    use warnings;
    print Data::Dumper::Dumper($cfg);
    exit 0
  },

  'loglevel=s' => \$loglevel,
);

sub show_help {
  print(
    "cobalt2 invocation help \n\n",
    "  Information:\n",
    "   --version \n",
    "     Display current Cobalt::Core version \n",
    "   --dumpconfig \n",
    "     Display current Cobalt::Conf data structures.\n",

    "\n",
    "  Execution:\n",
    "   --nodetach / --nodaemon \n",
    "     Run in the foreground (do not daemonize) \n",
    "   --loglevel=LOGLEVEL \n",
    "     Specify log verbosity. Defaults to 'info' \n",
    "     Valid levels, most verbose to least: \n",
    "       debug info notice warn err crit alert emerg \n",
    "   --debug \n",
    "     Enable debug output. Overrides loglevel. \n",

    "\n",
    "  Paths:\n",
    "   --etc=/path/to/etcdir \n",
    "     Specify a confdir. Defaults to INSTALLDIR/etc/ \n",
    "   --var=/path/to/vardir \n",
    "     Specify directory used for logs and databases\n",
    "     Defaults to INSTALLDIR/var/ \n\n",
    ## FIXME; note on POCOIRC_DEBUG and POE debug opts ?
  );

  exit 0
}

croak "can't locate etc: $etc" unless $etc and -d $etc;
croak "can't locate var; $var" unless $var and -d $var;
say "-> debug ON, overriding loglevel" if $opt_debug;

$loglevel = lc $loglevel;
my @loglevels = qw/debug info notice warn warning
                   err error crit critical alert
                   emerg emergency/;

unless ($loglevel ~~ @loglevels)
{ 
  say("Invalid loglevel ($loglevel)");
  say("Possible loglevels, most verbose to least: ".join(' ',@loglevels));
  say("Setting loglevel to INFO");
  $loglevel = 'info';
}

use Proc::PID::File;
my $pid = Proc::PID::File->new(
  dir => $var,
  name => 'cobalt',
);
if ($pid->alive) {
  say "cobalt appears to be already running";
  exit 1
}

## POSIX fork dance
use POSIX ();
if ($opt_detach)
{
  say("Starting cobalt in background");
  my $fork = fork;
  exit 1 if not defined $fork;
  exit 0 if $fork;
  POSIX::setsid();
  $fork = fork;
  exit 1 if not defined $fork;
  exit 0 if $fork;
  chdir(join('/', @root));
  open(STDIN, '<', '/dev/null');
  open(STDOUT, '>>', '/dev/null');
  open(STDERR, '>>', '/dev/null');
  umask(022);
}
$pid->touch();


require Cobalt::Core;
require Cobalt::Conf;
my $cfg = Cobalt::Conf->new(etc => $etc)->read_cfg;
Cobalt::Core->new(
  cfg => $cfg,
  loglevel => $loglevel, 
  debug => $opt_debug,
  detached => $opt_detach,
  var => $var,
)->init;
POE::Kernel->run;
