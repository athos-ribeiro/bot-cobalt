#!perl

use 5.10.1;
use strictures 1;

use File::Copy;

use Bot::Cobalt::Frontend::RC qw/rc_read/;
use Bot::Cobalt::Frontend::Utils qw/
  ask_yesno
  ask_question
/;

my($path_dest, $this_plugin);
my $path_rcfile = $ENV{HOME} . "/.cobalt2rc" ;

use Getopt::Long;
GetOptions(
  help => sub {
    ## FIXME
    exit 0
  },
  
  'plugin=s'   => \$this_plugin,
  
  'rcfile=s'   => \$path_rcfile,

  'destination=s' => \$path_dest,
);

$this_plugin = $ARGV[0] unless $this_plugin;
unless ($this_plugin) {
  die "No plugin specified.\n";
}

## set up path_dest
unless ($path_dest) {
  my ($base, $etc) = rc_read();

  print "Current etcdir: $etc\n",
        "No path was specified\n",
        "Attempting to write one under etcdir\n";
  
  $path_dest = ask_question(
    prompt => "Write file (under etc/plugins/)",
  );
}

write_conf( try_load_cf($this_plugin) );
print "Config for $this_plugin\n",
      "Written to: $path_dest\n",

sub try_load_cf {
  my ($plugin) = @_;

  my $plugincf = $plugin . '::Conf' ;

  eval "require $plugincf";
  return if $@;

  die "No conf() method found for $plugincf\n"
    unless $plugincf->can('conf');

  return 
    $plugincf->conf || die "$plugincf did not return a true value"
}

sub write_conf {
  my ($thiscf) = @_;
  
  die "write_conf not passed a conf" unless $thiscf;

  if (-e $path_dest) {
    print "Warning! The destination file appears to exist.\n";
    print "Path: $path_dest\n";
    my $overwrite = ask_yesno(
      prompt  => "Overwrite destination path?",
      default => "n",
    );
    
    die "Exiting, destination exists.\n"
      unless $overwrite;
  }

  open my $fh, '>', $path_dest
    or die "open: $path_dest: $!";
  print $fh $thiscf;
  close $fh;
  return 1
}


## FIXME offer to try appending to plugins.conf ?
##  -> copy to .bak
