#!perl
## cobalt2 Cobalt::Core frontend

use 5.12.1;
use strict;
use warnings;
use Carp;

my $rcfile = $ENV{HOME}."/.cobalt2rc";
my $opt_debug = 0;
my $opt_detach = 1;
my $loglevel = 'info';
my $basedir;

use Proc::PID::File;

use Getopt::Long;
GetOptions(
  ## Path to .cobalt2rc
  'rcfile=s' => \$rcfile,
  'config=s' => \$rcfile,

  ## Override .cobalt2rc
  'rundir=s' => \$basedir,
  'base=s'   => \$basedir,

  ## Invocation opts
  'debug!'  => \$opt_debug,   ## Overrides loglevel=
  'detach!' => \$opt_detach,
  'daemon!' => \$opt_detach,
  'loglevel=s' => \$loglevel,

  ## Informational
  version => sub {
    require Cobalt::Core;
    print("cobalt $Cobalt::Core::VERSION\n"); 
    exit 0
  },

  help => \&show_help,
);

sub show_help {
  print(
    "cobalt2 invocation help \n\n",
    "  Information:\n",
    "   --version \n",
    "     Display current Cobalt::Core version \n",

    "\n",
    "  Execution:\n",
    "   --nodetach / --nodaemon \n",
    "     Run in the foreground (do not daemonize) \n",
    "   --loglevel=LOGLEVEL \n",
    "     Specify log verbosity. Defaults to 'info' \n",
    "     Valid levels, most verbose to least: \n",
    "       debug info notice warn err crit alert emerg \n",
    "   --debug \n",
    "     Enable debug output. Overrides loglevel. \n",

    "\n",
    "  Paths:\n",
    "   --rcfile=/path/to/rcfile \n",
    "     Specify a rcfile. Defaults to \$HOME/.cobalt2rc \n",
    "   --base=/path/to/basedir \n",
    "     Specify base path for 'etc/' and 'var/' for this instance\n",
    "     Overrides rcfile. \n\n",
    ## FIXME; note on POCOIRC_DEBUG and POE debug opts ?
  );

  exit 0
}


say "-> debug ON, overrides loglevel" if $opt_debug;
## Cobalt::Core does this anyway, but just for the validator:
$loglevel = $opt_debug ? 'debug' : lc $loglevel ;
## Check specified loglevel
my @loglevels = qw/debug info notice warn warning
                   err error crit critical alert
                   emerg emergency/;

unless ($loglevel ~~ @loglevels)
{ 
  say("Invalid loglevel ($loglevel)");
  say("Possible loglevels, most verbose to least: ".join(' ',@loglevels));
  say("Setting loglevel to INFO");
  $loglevel = 'info';
}

my ($etcdir, $vardir);

if ($basedir) {
  say ">! Using --basedir=${basedir}";
  ## A basedir was specified, disregard cobalt2rc
  unless (-e $basedir) {
    croak "basedir $basedir specified but nonexistant";
  }

  $etcdir = $basedir . "/etc";
  $vardir = $basedir . "/var";

} else {
  ## no basedir specified, try rcfile
  _rc_check();
  ($basedir, $etcdir, $vardir) = _rc_read();
}

_check_dirs();
_check_cfs();
_dumpcfg() if $ENV{COBALT_DUMP_CONFIG};
_start_cobalt();


## Functions

sub _rc_check {
  unless (-e $rcfile) {
    say ">! rcfile $rcfile not found.";
    say ">! You can specify one via --rcfile=";
    say ">! If this is your first time running cobalt2, try `cobalt2-installer`";
    die "rcfile not found"
  } else {
    return 1
  }
}

sub _rc_read {
  ## read in vars from a rcfile
  open(my $fh, '<', $rcfile) 
    or die ">! Unable to open specified rcfile: $rcfile: $!";
  my $str;
  { local $/; $str = <$fh>; }
  close($fh) or warn "failed close; $rcfile; $!";

  my ($BASE, $ETC, $VAR);
  eval $str;
  if ($@) {
    croak "Errors reported during rc parsing; $@";
  }

  ## my ($base, $etc, $var) = _rc_read()
  return ($BASE, $ETC, $VAR);
}

sub _check_dirs {
  ## Check if etcdir and vardir are set and exist
  unless ($etcdir) {
    say ">! etcdir $etcdir is not set.";
    say ">! Your rcfile ($rcfile) may be broken.";
    say ">! You can override the rcfile via --etc=";
    say ">! Otherwise, you may want to try `cobalt2-installer`";
    die "no etcdir set"
  }

  unless ($vardir) {
    say ">! vardir $vardir is not set.";
    say ">! Your rcfile ($rcfile) may be broken.";
    say ">! You can override the rcfile via --var= or try `cobalt2-installer`";
    die "no vardir set"
  }

  unless (-d $etcdir) { ## FIXME symlinks ...?
    say ">! etcdir $etcdir doesn't appear to be a directory.";
    say ">! Your rcfile ($rcfile) may be broken.";
    say ">! You can override via --etc=DIR or try `cobalt2-installer`";
    die "etcdir not a directory"
  }

  unless (-d $vardir) {
    say ">! vardir $vardir doesn't appear to be a directory.";
    say ">! Your rcfile ($rcfile) may be broken.";
    say ">! You can override via --var=DIR or try `cobalt2-installer`";
    die "vardir not a directory"
  }

}

sub _check_cfs {
  ## Check if required confs exist in etcdir
  ## Otherwise suggest cobalt2-installer

  my @required = qw/ cobalt.conf channels.conf plugins.conf /;

  for my $file (@required) {
    unless (-e $etcdir . "/" . $file) {
      say ">! Missing core conf: $file";
      say ">! (etcdir: $etcdir)";
      say ">! You may want to try `cobalt2-installer`";
      die "missing core conf: $file"
    }
  }
}


sub _start_cobalt {
  my $pid = Proc::PID::File->new(
    dir => $vardir,
    name => 'cobalt',
  );
  if ($pid->alive) {
    say "cobalt appears to be already running";
    exit 1
  }

  ## POSIX fork dance
  use POSIX ();
  if ($opt_detach)
  {
    say "Starting cobalt in background";
    my $fork = fork;
    exit 1 if not defined $fork;
    exit 0 if $fork;
    POSIX::setsid();
    $fork = fork;
    exit 1 if not defined $fork;
    exit 0 if $fork;
    chdir('/');
    open(STDIN, '<', '/dev/null');
    open(STDOUT, '>>', '/dev/null');
    open(STDERR, '>>', '/dev/null');
    umask(022);
  }
  $pid->touch();

  require Cobalt::Conf;
  require Cobalt::Core;
  my $cfg = Cobalt::Conf->new(etc => $etcdir)->read_cfg;
  Cobalt::Core->new(
    cfg => $cfg,
    loglevel => $loglevel, 
    debug => $opt_debug,
    detached => $opt_detach,
    var => $vardir,
  )->init;

  POE::Kernel->run;
}


sub _dumpcfg {
  require Cobalt::Conf;
  my $cfg = Cobalt::Conf->new(etc => $etcdir)->read_cfg;
  require Data::Dumper;
  no warnings;
  $Data::Dumper::Sortkeys = 1;
  $Data::Dumper::Useqq = 1;
  use warnings;
  print Data::Dumper::Dumper($cfg);
  exit 0
}


=pod

=head1 NAME

cobalt2 - Cobalt IRC bot

=head1 SYNOPSIS

  # Start cobalt2 in the background
  # Grab etc/var paths from ~/.cobalt2rc
  cobalt2

  # Start but do not detach
  # '--nodaemon' is also valid
  cobalt2 --nodetach

  # Start in the foreground in debug mode
  cobalt2 --debug --nodetach

  # Start cobalt2 using a specified rcfile
  cobalt2 --rcfile=/path/to/cobalt2rc

  # Start cobalt2, only log warnings and above
  cobalt2 --loglevel=warn


=head1 OPTIONS

FIXME


=head1 SEE ALSO


L<Cobalt::Manual::Plugins>

L<Cobalt::IRC>


=head1 AUTHOR

Jon Portnoy <avenj@cobaltirc.org>

L<http://www.cobaltirc.org>

=cut
