#!perl

my $VERSION = 2;

use v5.10;
use strictures 1;

use Scalar::Util 'reftype';

use List::Objects::WithUtils;

use Path::Tiny;
use Types::Path::Tiny -all;

use File::ShareDir  'dist_dir';

use Bot::Cobalt::Utils 'rplprintf', 'mkpasswd';
use Bot::Cobalt::Frontend::Utils ':all';
use Bot::Cobalt::Frontend::RC    'rc_read', 'rc_write';


my $Rcfile = path(
  $ENV{HOME} ? $ENV{HOME} . '/.cobalt2rc' : '.cobalt2rc'
);

use Getopt::Long;
GetOptions(
  'config|rcfile=s' => \$Rcfile,

  version => sub {
    say "Bot::Cobalt installer (version $VERSION)";
    exit 0
  },

  help    => sub {
    print map "$_\n",
      "  --config / --rcfile=PATH",
      "    [default: $Rcfile]"
    ;
    exit 0
  },
);


sub read_format_write {
  my ($path, $vars) = @_;
  die "Expected Path::Tiny but got $path"
    unless is_Path($path);
  die "Expected HASH of template var replacements but got $vars"
    unless reftype $vars eq 'HASH';

  my $in = $path->slurp_utf8;
  my $out = rplprintf($in, $vars);
  $path->spew_utf8($out);
  $path
}

sub build_dir_skeleton {
  my ($base, $etc, $var) = @_;
  die "Expected a base Path object but got $path"
    unless is_Path($base);

  $etc = path( $base . '/etc' ) unless $etc;
  $var = path( $base . '/var' ) unless $var;
  my $dbpath = path( $var . '/db' );
  $_->mkpath for $etc, $var, $dbpath;

  # FIXME using this..? maybe not?
  hash( base => $base, etc => $etc, var => $var )->inflate
}


sub copy_base_confs {
  my ($target_etc) = @_;
  die "BUG; expected target etcdir" unless defined $target_etc;

  my $shared_etc = path(
    join '/', dist_dir('Bot-Cobalt'), 'etc'
  );

  die "Could not locate ShareDir at '$shared_etc'"
    unless $shared_etc->exists;
  die "ShareDir at '$shared_etc' not a directory"
    unless $shared_etc->is_dir;

  my $manifest = path(join '/', $shared_etc, 'Manifest');
  die "Could not locate Manifest at '$manifest'"
    unless $manifest->exists;
  my @lines = $manifest->lines_utf8;
  for my $item (@lines) {
    my ($relpath, $sum_or_dir) = split ' ^ ', $item;
    if ($sum_or_dir eq 'DIR') {
      my $newdir = path(join '/', $target_etc, $relpath);
      say ">>> Creating directory '$newdir'";
      $newdir->mkpath
    } else {
      my $oldfile = path(join '/', $shared_etc, $relpath);
      my $newfile = path(join '/', $target_etc, $relpath);
      say ">>> Copying '$relpath' -> '$newfile'";
      $newfile->spew_utf8( $oldfile->slurp_utf8 );
      my $newsum = md5_hex $newfile->slurp_raw;
      unless ($sum_or_dir eq $newsum) {
        warn "WARNING; checksum mismatch after copy: '$relpath'";
      }
    }
  }
}


sub non_interactive {
  # FIXME set up some default var replacements
  # FIXME env or command line opts for rc paths, basics?
}


sub interactive_intro {
  say $_ for
    "This is the Bot::Cobalt install helper.",
    "This script will create a cobalt2rc file specifying the bot's paths.",
    "It will also help initialize some starter configuration files.",
    "",
    "Press ENTER to continue, Ctrl+C to quit." ;

  readline STDIN;
}

sub interactive_rcfile {
  say $_ for 
    "The default rcfile location is:",
    " $Rcfile" ;
  $Rcfile = ask_question( prompt => 'Path to rcfile' ) if ask_yesno(
    prompt  => 'Enter a different rcfile location?',
    default => 'n',
  );

  say "Installing rcfile to $Rcfile";

  say $_ for
    "Bot::Cobalt needs a place to store config and variable data.",
    "This can be any path writable by the user running the bot.",
    "(If it doesn't exist, we will attempt to create it.)" ;
  my $default_basedir = $ENV{HOME} ? $ENV{HOME} . '/cobalt2' : './cobalt2' ;
  my $basedir_ans = ask_question(
    prompt  => 'Base directory',
    default => $default_basedir,
  );
  my $basedir = path($basedir_ans);

  # FIXME prompt if exists
  # FIXME call rc write
  # FIXME call build_dir_skeleton, copy_base_confs
}

sub interactive_cobaltcf {
  my ($conf_repl) = @_;
  say ">>> 'cobalt.conf'";
  my $cfvars = $conf_repl->get('cobalt');
  
  # CFG_BOT_NICK
  $cfvars->set( CFG_BOT_NICK =>
    ask_question( prompt  => 'Nickname', default => 'cobalt2' )
  );

  # CFG_BOT_USERNAME
  $cfvars->set( CFG_BOT_USERNAME =>
    ask_question( prompt => 'Username', default => 'cobalt' )
  );
  
  # CFG_BOT_REALNAME
  $cfvars->set( CFG_BOT_REALNAME =>
    ask_question( prompt => 'Realname (GECOS)', default => 'Bot::Cobalt' )
  );

  # CFG_CMD_CHAR
  $cfvars->set( CFG_CMD_CHAR =>
    ask_question( prompt => 'Command prefix character', default => '!' )
  );

  # CFG_SERVER_ADDR
  $cfvars->set( CFG_SERVER_ADDR =>
    ask_question( prompt => 'Server address', default => 'irc.cobaltirc.org' )
  );

  # CFG_USE_SSL
  say "If you choose to use SSL, POE::Component::SSLify must be installed.";
  my $maybe_ssl = ask_yesno(
    prompt => 'Use SSL for this server?', default => 'n'
  );
  if ($maybe_ssl) {
    local $@;
    eval {; require POE::Component::SSLify };
    if (my $err = $@) {
      say $_ for
        "! POE::Component::SSLify could not be loaded: $err",
        "! SSL may fail!";
    }
  }
  $cfvars->set( CFG_USE_SSL => $maybe_ssl );

  # CFG_SERVER_PORT
  $cfvars->set( CFG_SERVER_PORT =>
    ask_question(
      prompt  => 'Server port',
      default => ( $maybe_ssl ? 6697 : 6667 ),
    )
  );
}

sub interactive_channelscf {
  my ($conf_repl) = @_;
  say ">>> 'channels.conf'";
  my $cfvars = $conf_repl->get('channels');
  # FIXME audit
}

sub interactive_authcf {
  my ($conf_repl) = @_;
  say ">>> 'auth.conf'";
  my $cfvars = $conf_repl->get('auth');
  # AUTH_USER
  # AUTH_PASS
  # AUTH_MASK
  # ability to add more users ??
}


sub interactive {
  my @refs = (
    &interactive_intro,
    &interactive_rcfile,
    &interactive_cobaltcf,
    &interactive_channelscf,
    &interactive_authcf,
  );

  my $conf_repl = hash(
    cobalt    => hash,
    channels  => hash,
    auth      => hash,
  );
  $_->($conf_repl) for @refs;

  # FIXME read back rc written in interactive_rcfile to get basedir
  #  build $actual paths in loop
  #  call read_format_write($abspath, $repl_hash)
  for my $kv ($conf_repl->kv->all) {
    my ($path_prefix, $repl_hash) = @$kv;
   
    # FIXME iterate $conf_repl, call read_format_write
  }

  # FIXME auth needs permissions adjustment (or warn)
}


## FIXME
##   should be able to install non-interactively (template replacement
##   defaults)
##
##   interactive mode needs to cover:
##    - rcfile placement
##      * default to $Rcfile
##      * prompt if overwriting
##    - cobalt basedir
##      * default to $HOME/cobalt2
##      * prompt if exists and populated
##    - cobalt.conf
##      * CFG_BOT_NICK, CFG_BOT_USERNAME, CFG_BOT_REALNAME
##      * CFG_CMD_CHAR
##      * CFG_SERVER_ADDR
##      * CFG_USE_SSL
##      * CFG_SERVER_PORT
##    - channels.conf
##      * CHAN
##      * ??
##    - auth.conf
##      * AUTH_USER
##      * AUTH_PASS  (Termios turn off echo)
##      * AUTH_MASK
##      * ability to add more users?
##
##   installation should populate:
##    - $Rcfile
##    - $basedir/etc/ by copying from ShareDir
##    - template replacement for:
##      * cobalt.conf
##      * channels.conf
##      * auth.conf
##      * write as we go?
##    - $basedir/var/db [empty]

