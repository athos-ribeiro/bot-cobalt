#!perl
my $version = '0.12';

use 5.12.1;
use strict;
use warnings;
use Carp;

use File::Path;

use JSON;

use Cobalt::Utils qw/ rplprintf mkpasswd /;

STDOUT->autoflush(1);

my $rcfile = $ENV{HOME} . "/.cobalt2rc";

use Getopt::Long;
GetOptions(

  version => sub {
    say "$0 $version";
    exit 0
   },

  help => sub {
    print(
      "$0 $version\n\n",
      "Options:\n",
      "  -c, --rcfile=PATH    Path to cobalt2 rcfile\n",
      "                       [default: $rcfile]\n",
    );
    exit 0
   },

  'rcfile=s' => \$rcfile,
  'config=s' => \$rcfile,
);


sub _deserialize_etc {
  ## Pulls our /etc from our DATA handle
  my $json;
  {  local $/ ; $json = <DATA>;  }
  my $ref = decode_json $json; 
  return ref $ref eq 'HASH' ? $ref : () ;
}

sub _slurp {
  my ($path) = @_;
  ## Slurp a file
  my $str;
  open(my $fh, '<', $path) or croak "failed file read: $path: $!" ;
  {  local $/ ; $str = <$fh>;  }
  close($fh) or carp "failed to close $path: $!";
  return $str
}

sub _ans {
  ## f.ex: my $default_yes = _ans(my $in = <STDIN>, 'Y')
  my ($stdin, $default) = @_;
  chomp($stdin);
  $stdin = $stdin ? $stdin : $default ;
  return unless $stdin =~ /^Y/i;
}

## RC_* funcs
sub RC_Read {
  ## Read the current $rcfile
  my $str = _slurp($rcfile);
  my ($BASE, $ETC, $VAR);
  eval $str;
  if ($@) {
    croak "Errors reported during rc parsing; $@";
  }
  return ($BASE, $ETC, $VAR);
}

sub RC_Write {
  my ($relative_base) = @_;
  ## Pass me a base path relative to $ENV{HOME} such as 'cobalt2'
  ## Writes a basic cobalt2rc to current value of $rcfile
  my $str = join "\n",
    '## cobalt2rc automatically generated at '.scalar localtime,
    '$BASE = $ENV{HOME} . "/'.$relative_base.'";' ,
    '$ETC = $BASE . "/etc";' ,
    '$VAR = $BASE . "/var";' ,
  ;

  open(my $fh, '>', $rcfile)
    or croak "failed to open $rcfile: $!";
  print $fh $str;
  close($fh) or carp "close failed for $rcfile: $!";

  say ">! wrote rcfile";
  say ">! ETC is: ". $ENV{HOME} ."/". $relative_base . "/etc" ;
  say ">! VAR is: ". $ENV{HOME} ."/". $relative_base . "/var" ;
  say ">! To change, edit $rcfile\n";
}


## Conf_* funcs

sub Conf_write_confs {
  ## Conf_write_confs($vars_replacement_hash)
  my ($vars_h) = @_;
  my ($base, $etc, $var) = RC_Read();
  File::Path::mkpath( $var ."/db" );
  my $ref = _deserialize_etc();
  ## should have a vars hash for rplprintf, and RC_Read can give us an etc dir path
  ## use File::Path to create our dir structure
  ## write our deserialized confs back out
  ## run rplprintf against each file before writing
  for my $confpath (keys %$ref) {

    my $output_path = $etc ."/". $confpath ;
    (undef, my $dir, my $file) = File::Spec->splitpath($output_path);
    File::Path::mkpath($dir) if $dir;
    croak "tried to create $dir but can't be found?" unless -e $dir;

    my $content = $ref->{$confpath};
    my $output = rplprintf( $content, $vars_h );

    say ">! Attempting to write $output_path . . .";

    if (-e $output_path) {
      say ">! Exists already: $output_path";
      print "Should I overwrite it? [y/N] ";
      if ( _ans(my $in = <STDIN>, 'N') ) {
        say ">! Overwriting $output_path";
      } else { next }
    }

    open(my $fh, '>', $output_path) or croak "open failed: $output_path: $!";
    print $fh $output;
    close($fh) or carp "close failed on $output_path: $!";

    say ">! Wrote $confpath";
  }

  say ">! Finished writing confs.";
}


sub Conf_interactive {
  my $cf = {};

  print(
    "Interactively configuring basic cobalt2 opts.\n",
    "This installer only covers the most basic set of options.\n",
    "You should review etc/ yourself when finished.\n\n",
    "Defaults are shown [like this]\n\n",
  );

  say ">! Configuring cobalt.conf";

  print "Bot's nickname [cobalt2] ";
  $cf->{CFG_BOT_NICK} = <STDIN>;
  chomp $cf->{CFG_BOT_NICK} ;
  $cf->{CFG_BOT_NICK} ||= 'cobalt2';

  print "Bot's username [cobalt] ";
  $cf->{CFG_BOT_USERNAME} = <STDIN>;
  chomp $cf->{CFG_BOT_USERNAME} ;
  $cf->{CFG_BOT_USERNAME} ||= 'cobalt';

  print "Bot's 'realname' [cobalt2 bot] ";
  $cf->{CFG_BOT_REALNAME} = <STDIN>;
  chomp $cf->{CFG_BOT_REALNAME} ;
  $cf->{CFG_BOT_REALNAME} ||= 'cobalt2 bot';

  print "Remote ServerAddr [irc.cobaltirc.org] ";
  $cf->{CFG_SERVER_ADDR} = <STDIN>;
  chomp $cf->{CFG_SERVER_ADDR} ;
  $cf->{CFG_SERVER_ADDR} ||= 'irc.cobaltirc.org';

  print "Use SSL for this server? [y/N] ";
  my $usessl = _ans(my $in = <STDIN>, 'n');
  $cf->{CFG_USE_SSL} = $usessl ? 1 : 0 ;

  my $default_irc_port = $usessl ? 6697 : 6667 ;
  print "Remote port [$default_irc_port] ";
  $cf->{CFG_SERVER_PORT} = <STDIN>;
  chomp $cf->{CFG_SERVER_PORT} ;
  $cf->{CFG_SERVER_PORT} ||= $default_irc_port;

  say "You need to specify a command character for the bot.";
  say "This is used to prefix various plugin-provided commands.";
  print "Bot's command character [ ! ] ";
  $cf->{CFG_CMD_CHAR} = <STDIN>;
  chomp $cf->{CFG_CMD_CHAR};
  $cf->{CFG_CMD_CHAR} ||= '!' ;

  say ">! Done configuring cobalt.conf" ;
  say ">! There are many more opts; review the file!";

  # plugins.conf is probably fine with a suitable example file
  
  say ">! Configuring channels.conf";
  say "You're going to want to set up an initial channel.";

  print "Channel name [#otw] ";
  $cf->{CHAN} = <STDIN>;
  chomp $cf->{CHAN};
  $cf->{CHAN} ||= '#otw';

  ## FIXME ChanMgr?
  say "You may want to edit channels.conf and add other channels.";

  say ">! Configuring auth.conf";

  say "You'll want at least one SuperUser to control the bot.";
  say "Authorized users have a username that may or may not be their IRC nick.";
  print "Username for your superuser: ";
  $cf->{AUTH_USER} = <STDIN>;
  chomp $cf->{AUTH_USER};
  $cf->{AUTH_USER} ||= 'MyUser';

  say "By default, passwords are encrypted using bcrypt.";
  say "bcrypt is a pretty secure way to generate password hashes.";
  ## FIXME bcrypt url

  eval "require Term::ReadKey";
  if ($@) {
    say ">! WARNING: No Term::ReadKey found.";
    say ">! Cannot blank passwd prompts!"; 
  } else {
    Term::ReadKey->import('ReadMode');
  }
  print "Passwd for user ".$cf->{AUTH_USER}.": ";
  ReadMode('noecho') if exists &ReadMode;
  my $clearpwd = <STDIN>;
  ReadMode(0) if exists &ReadMode;
  chomp $clearpwd;
  $cf->{AUTH_PASS} = mkpasswd($clearpwd || rand);

  ## FIXME  AUTH_MASK

  say "You may want to edit auth.conf to add/edit superusers and masks.";
  ## FIXME chmod auth.conf ?

  return $cf
}


## MAIN
print(
  "This is the cobalt2 install helper.\n",
  "This script will create a cobalt2rc file specifying install paths.\n",
  "It will also help you initialize some starter cobalt2 conf files.\n",
  "> Press ENTER to continue, Ctrl+C to quit.",
);
<STDIN>;

say "> Default rcfile: $rcfile";

## prompt user for a rcfile path
print "> Enter a different rcfile location? [y/N] ";
if ( _ans(my $in = <STDIN>, 'N') ) {
  do {
    print "> Path to rcfile: ";
    $rcfile = <STDIN>; chomp($rcfile);
  } until $rcfile;
}

say ">! using rcfile: $rcfile";

## prompt user for a relative basedir
say "> Cobalt needs a place for etc/ and var/ to live.";
say "> Normally this would be somewhere in your HOME directory.";
say "> Specify a directory relative to your HOME for cobalt to live:";
print "[cobalt2] ";
my $relative_basedir = <STDIN> ; chomp($relative_basedir);

if (-e $rcfile) {
  say ">! $rcfile seems to already exist.";
  say ">! Should I overwrite it? [y/N] ";
  if ( _ans(my $in = <STDIN>, 'N') ) {
    RC_Write($relative_basedir);
  } else {
    say ">! Skipping rcfile write; attempting to use existing.";
  }
} else {
  RC_Write($relative_basedir);
}

my $rplvars = Conf_interactive();

Conf_write_confs($rplvars);

say ">! Finished.";

=pod

=head1 NAME

cobalt2-installer - install a cobalt2 instance

=head1 SYNOPSIS

B<cobalt2-installer> [ --rcfile=PATH ]

=head1 DESCRIPTION

A simple walk-through installer for the cobalt2 IRC bot.

Asks a few questions and copies initial confs and langsets to a specified 
directory, giving your cobalt2 bot a convenient home.

Typically you would run this installer before starting Cobalt:

  ## From a shell
  ## Build and install normally via build or makefile ...
  ~/cobalt2 $ perl Build.PL
  ~/cobalt2 $ perl Build && perl Build install
  ## Initiate a new cobalt2 instance
  ## Each instance has its own rcfile
  $ cobalt2-installer
  $ cobalt2

You can run multiple instances of Cobalt, but they each need their own 
I<etc> and I<var> directories, specified in their own rcfile:

  ## Initiate another cobalt2 instance
  $ cobalt2-installer --rcfile=${HOME}/cobalts/MyCobalt.rc
  $ cobalt2 --rcfile=${HOME}/cobalts/MyCobalt.rc

=head1 AUTHOR

Jon Portnoy <avenj@cobaltirc.org>

L<http://www.cobaltirc.org>

=cut

__DATA__
{"plugins/randstuff.conf":"---\n## cobalt2 Plugin::RDB configuration\n\nOpts:\n  ## Plugin::RDB stores RDBs in DBM::Deep databases.\n  ## Path to db, relative to our var/ dir:\n  RandDB: db/rdb.db\n\n  ## Whether or not to allow complete deletion of RDBs\n  ## (BOOLEAN, default false)\n  AllowDelete: 0\n\n  ## Whether or not to allow deletion of the main RDB\n  ## Overrides AllowDelete\n  ## Set to an access level to enable for that level.\n  AllowDeleteMain: 0\n\n## Levels required to execute various commands.\nRequiredLevels:\n  rdb_info: 0\n  rdb_add_item: 1\n  rdb_del_item: 3\n  rdb_create: 3\n  rdb_delete: 9999\n","plugins/info3.conf":"---\n","langs/english.yml":"---\n## etc/langs/english.yml\n## This is a cobalt2 core langset.\n##\n## It provides IRC message strings for core plugins incl. Cobalt::IRC\n##\n## See the Cobalt::Lang docs for information on loading langsets.\n## See the Cobalt::Utils docs for help with formatting RPL strings.\n##\n## The actual replies exist in 'RPL:' below.\n## Typically they are strings formattable by Cobalt::Utils::rplprintf\n## The list of available variables is documented with each RPL.\n##\n## Variables with trailing characters can be terminated with %\n## e.g. \"Running %version%.\"  -> \"Running cobalt 2.00.\"\n\nNAME: english\nREV: 4   ## bump +1 on significant revisions please\nSPEC: 0  ## someday there'll be a langspec.\n\nRPL:\n\n ## Core Cobalt set:\n\n  ## RPL_PLUGIN_LOAD: %plugin, %module\n  RPL_PLUGIN_LOAD: \"Plugin loaded: %plugin (%module%)\"\n\n  ## RPL_PLUGIN_UNLOAD: %plugin\n  RPL_PLUGIN_UNLOAD: \"Plugin removed: %plugin\"\n\n  ## RPL_PLUGIN_ERR: %plugin, %err\n  RPL_PLUGIN_ERR: \"Failed plugin load: %plugin%: %err\"\n\n  ## RPL_PLUGIN_UNLOAD_ERR: %plugin, %err\n  RPL_PLUGIN_UNLOAD_ERR: \"Failed plugin unload: %plugin%: %err\"\n\n  ## RPL_TIMER_ERR\n  RPL_TIMER_ERR: \"Failed to add timer; unknown timer_set failure\"\n\n\n ## Cobalt::IRC:\n\n  ## RPL_CHAN_SYNC: %chan\n  RPL_CHAN_SYNC: \"Sync complete on %chan\"\n\n\n ## Plugin::Version:\n\n  ## RPL_VERSION: %version, %perl_v, %poe_v, %pocoirc_v\n  RPL_VERSION: \"Running %version (perl-%perl_v poe-%poe_v pocoirc-%pocoirc_v%) -- http://www.cobaltirc.org\"\n\n  ## RPL_INFO: %version, %plugins, %uptime, %sent\n  RPL_INFO: \"Running %version%. I have %plugins plugins loaded. I've been up for %uptime and responded %sent times.\"\n\n  ## RPL_OS: %os\n  RPL_OS: \"I am running %os\"\n\n  ## RPL_NO_ACCESS: %nick\n  RPL_NO_ACCESS: \"%nick%, you are not authorized!\"\n\n ## Plugin::Alarmclock:\n\n  ## ALARMCLOCK_SET: %nick, %secs, %timestr, %timerid\n  ALARMCLOCK_SET: \"Alarm set to trigger in %secs%s (%nick%) [timerID: %timerid%]\"\n\n ## Plugin::Auth:\n\n  ## Broken syntax RPLs, no args:\n  AUTH_BADSYN_LOGIN: \"Bad syntax. Usage: LOGIN <username> <passwd>\"\n\n  ## AUTH_SUCCESS: %context, %src, %nick, %user, %lev\n  AUTH_SUCCESS: \"Successful auth [%nick%] (%user - %lev%)\"\n\n  ## AUTH_FAIL_*: $context, %src, %nick, %user\n  AUTH_FAIL_BADHOST: \"Login failed; host mismatch for %user [%src%]\"\n  AUTH_FAIL_BADPASS: \"Login failed; passwd mismatch (%user%)\"\n  AUTH_FAIL_NO_SUCH: \"Login failed; no such user (%user%)\"\n\n  ## AUTH_STATUS, $nick, $level\n  AUTH_STATUS: ~\n\n  ## AUTH_USER_ADDED, $username, $mask, $level\n  AUTH_USER_ADDED: ~\n\n  ## AUTH_MASK_ADDED, $mask, $username\n  AUTH_MASK_ADDED: ~\n\n  ## AUTH_MASK_DELETED, $mask, $username\n  AUTH_MASK_DELETED: ~\n\n  ## AUTH_USER_DELETED, $username, $level\n  AUTH_USER_DELETED: ~\n\n  ## AUTH_USER_EXISTS, $username\n  AUTH_USER_EXISTS: ~\n\n\n ## Plugin::Info3:\n\n  ## RPL_DONTKNOW, %topic\n  RPL_DONTKNOW: \"I don't know anything about %topic\"\n\n  ## RPL_WHAT, %nick\n  RPL_WHAT: \"%nick%, what?\"\n\n  RPL_INFO3_ADD:\n\n  RPL_INFO3_DEL:\n\n  RPL_INFO3_SEARCH:\n\n  RPL_INFO3_REPLACE:\n\n  RPL_INFO3_REPLACE_FAILED:\n\n  RPL_INFO3_ERR_NOSUCH:\n\n  RPL_INFO3_ERR_EXISTS:\n\n  RPL_RSTUFF_ADD:\n\n  RPL_RSTUFF_DEL:\n","auth.conf":"---\n## cobalt2 auth.conf (standard auth module config)\n## (example last modified for Plugin::Auth-0.10)\n\n## Arranged vaguely by priority.\n## You can probably just add a superuser and roll right along.\n\n## SuperUsers:\n##\n## Generally, users should be managed via the 'user' PRIVMSG commands.\n## However, bot superusers should be specified here.\n## A superuser's access level always trumps any other.\n## Plugins may also provide superusers with Special Powers (tm)\n##\n## Superusers exist per-context, but \"ALL\" is a valid server context.\n## (Behavior is undefined if you specify conflicting entries.)\n##\n## Password hashes can be created via `cobalt2-mkpasswd`\n## (Packaged with Cobalt; Try cobalt2-mkpasswd -h)\n## Bcrypt is strongly recommended (and also the default)\n##\n## Format looks something like this:\n## SuperUsers:\n##   <CONTEXT>:\n##     <USERNAME>:\n##       Mask: *!*user@*host # or a list, see below\n##       Password: <HASH>\n##\n## Here's a couple examples:\n##\n#SuperUsers:\n#  ## Here's a user with multiple masks.\n#  ## They only have privileges in the 'Main' server context.\n#  Main:\n#    rakshasa:\n#      ## List of masks:\n#      Mask:\n#        - '*avenj@*.oppresses.us'\n#        - '*avenj@*.cobaltirc.org'\n#      Password: '$2a$08$W19087w4dFjaET17sJsaheQ4eSzax3ORh7xryiWJkOzZiEjV/YGm2'\n#\n#    avenj:\n#      ## A superuser with one mask entry.\n#      Mask: '*avenj@*.oppresses.us'\n#      Password: '$2a$08$W19087w4dFjaET17sJsaheQ4eSzax3ORh7xryiWJkOzZiEjV/YGm2'\n\n# This one is for cobalt2-installer:\nSuperUsers:\n  Main:\n    '%AUTH_USER%':\n      Mask:\n        - '%AUTH_MASK'\n      Password: '%AUTH_PASS'\n\n\n## Opts:\n## Basic auth plugin options.\nOpts:\n  ## Our password crypting method.\n  ## 'bcrypt' is a good choice, and the default\n  ## 'md5' is fairly universal, but easy to break.\n  ## 'sha256' and 'sha512' probably only work on Linux/glibc2.7+\n  Method: bcrypt\n\n  ## Bcrypt_Cost: <two digit power of 2>\n  ##  Bcrypt work cost factor\n  ##  Only applies if using Method: bcrypt, above\n  ##  Must be a two digit power of 2, padded with 0 if needed.\n  ##  Lower is faster (less secure), higher is slower (more secure)\n  ##  '08' seems to be a pretty good balance.\n  ##  See http://codahale.com/how-to-safely-store-a-password/\n  Bcrypt_Cost: 08\n\n  ## YAML authdb relative to our var/ dir:\n  AuthDB: db/authdb.yml\n\n  ## Comment out to manage permissions yourself:\n  AuthDB_Perms: 0600\n\n\n\n## RequiredPrivs:\n##\n## Define required base access levels for certain operations.\nRequiredPrivs:\n\n  ## Generally users can add any user with a lower numeric access\n  ## level than their own (level 3 can add level 2, etc.)\n  ## You can specify a minimum base access level for adding new users:\n  AddingUsers: 2\n\n  ## ...same for deleting, or it'll default to the above value\n  DeletingUsers: 2\n\n  ## Required to use 'user list' and 'user search':\n  ListAndSearch: 1\n","cobalt.conf":"---\n## Cobalt core configuration (YAML1.0 spec)\n## Example conf last updated for cobalt2.00_6\n##\n## Some common opts, applicable to the Cobalt core.\n##\n## Many opts with sane defaults are commented out.\n## (If you don't understand them, feel free to disregard.)\n##\n## If you're reading the raw example file, you'll notice %VARS%\n## This are intended to be replaced by `cobalt2-installer`.\n##\n## YAML is a pretty easy format to work with. Some basics:\n## Strings can be quoted:\n##   Item: \"Some string\"\n## Booleans should generally be 0 or 1:\n##   BoolItem: 1\n##\n## There are tons of YAML references available online; it is an \n## extremely flexible markup language.\n\n## Language: specify the bot's language set \n##   Langsets are YAML and typically live in etc/langs/\n##   They are always lowercase.\n##   Current core sets include:  english, ebonics\nLanguage: english\n\nPaths:\n  ## Logfile  -- path to cobalt's system log\n  ##  Defaults to var/cobalt.log relative to cobalt's execdir.\n#  Logfile: /home/avenj/pl/cobalt2/var/cobalt.log\n\n## This is the config for the core single-server IRC plugin.\n## (aka server context 'Main')\n## You will probably have this context, even if using other IRC \n## interface plugins.\nIRC:\n\n  ## Nickname: the bot's nickname\n  ##  Cobalt will try to regain its nickname if possible.\n  ##  Also see Opts->NickRegainDelay in this conf.\n  Nickname: \"%CFG_BOT_NICK%\"\n\n  ## Username: bot's username@ string\n  ##  May not matter, if your system is running identd.\n  Username: \"%CFG_BOT_USERNAME%\"\n\n  ## Realname: bot's GECOS ('real name') string\n  Realname: \"%CFG_BOT_REALNAME%\"\n\n  ## ServerAddr: remote server address\n  ##  Self-explanatory.\n  ServerAddr: \"%CFG_SERVER_ADDR%\"\n\n  ## IPv6: Use IPv6 interfaces for this connection\n  ##  Boolean value determining whether to use IPv6 for this connection.\n  ##  Defaults to false.\n#  IPv6: 0\n\n  ## AltServers: a list of alternate servers to try\n  ##  If AltServers are specified, the bot will attempt to cycle \n  ##  through the list of servers.\n  ##\n  ##  Must be in the format (for example):\n  ##    - eris.cobaltirc.org:6697\n  ##    - irc.blackcobalt.net:6697\n  ##\n  ##  IMPORTANT: Be aware that opts (such as UseSSL) will carry over!\n  ##\n  ##  It is generally recommended you just use a round-robin in the \n  ##  ServerAddr directive instead and leave this commented.\n  ##\n  ##  Future versions may include a more flexible auto-reconnector.\n#  AltServers:\n#    - eris.cobaltirc.org:6697\n#    - raider.blackcobalt.net:6697\n\n  ## ServerPort: remote server port\n  ##  6667 is fairly standard for clear-text connections\n  ##  6697 has grown to be normal for SSL\n  ServerPort: %CFG_SERVER_PORT%\n\n  ## ServerPass: remote server connect password\n  ##  Optional.\n#  ServerPass:\n\n  ## UseSSL: enable SSL connections\n  ##  Comment out UseSSL to use a plain-text connection.\n  ##  Make sure ServerPort is an appropriate plain or SSL port.\n  ##  You will need POE::Component::SSLify installed.\n  UseSSL: %CFG_USE_SSL%\n\n  ## BindAddr: specify a local address to bind to\n  ##  Optional.\n#  BindAddr:\n\n  ## NickServPass: NickServ IDENTIFY password\n  ##  Attempt to autoidentify to NickServ if specified\n  ##  NOTE: There is a security risk to specifying it here in plaintxt.\n  ##       You probably want to check permissions for this conf.\n  ##       f.ex; sh$ chmod 600 cobalt.conf\n#  NickServPass: \n\nOpts:\n  ## CmdChar: prefix character for bot commands\n  ##  Most plugins look for cmdchar-prefixed command events.\n  ##  f.ex; CmdChar: '!'\n  CmdChar: \"%CFG_CMD_CHAR%\"\n\n  ## StonedCheck: server ping frequency in seconds\n  ##  The bot will try to ping the server to determine if it is still \n  ##  responsive. If not, a reconnect is attempted.\n  ##  Defaults to 300\n#  StonedCheck: 300\n\n  ## ReconnectDelay: server reconnect delay in seconds\n  ##  The time, in seconds, to wait between server reconnect attempts.\n  ##  Defaults to 60\n#  ReconnectDelay: 60\n\n\n  ## NickRegainDelay: time in seconds before nick regain attempts\n  ##  Defaults to 30\n#  NickRegainDelay: 30\n\n  ## NotifyOnSync: be noisy on channels when we've joined and synced\n  ##  Useful for determining when the bot is ready to respond.\n  NotifyOnSync: 1\n\n ## Some channel-related settings for this server context.\n ## The defaults should be fairly reasonable.\n\n  ## Chan_NickServDelay: time to wait for a NS response before joining\n#  Chan_NickServDelay: 1\n\n  ## Chan_RetryAfterKick: Set to 0 to disable rejoining after a kick.\n#  Chan_RetryAfterKick: 1\n\n  ## Chan_RejoinDelay: time in seconds before a rejoin attempt\n#  Chan_RejoinDelay: 5\n\n  ## Chan_RetryAfterBan: time in seconds before a post-ban rejoin attempt\n  ##   Set to 0 to disable retrying after a ban.\n#  Chan_RetryAfterBan: 60\n","plugins.conf":"---\n## cobalt2 plugins.conf\n\n## Plugins can be placed anywhere in lib/Cobalt:\n## $ mkdir lib/Cobalt/Plugin/MyPlugins\n## $ mv SomePlugin.pm lib/Cobalt/Plugin/MyPlugins/\n## Plugin definitions typically look like this:\n## PluginName:\n##   Module: Cobalt::Plugin::User::SomePlugin\n##   Config: plugins/userplugins/someplugin.conf\n## Config files will be automatically loaded (should be YAML)\n\n###### Core Plugins ######\n\nVersion:\n  ## 'Version' provides 'os' 'version' 'info' responses:\n  Module: Cobalt::Plugin::Version\n\nAuth:\n  ## The standard authentication module.\n  ## See auth.conf for more information.\n  Module: Cobalt::Plugin::Auth\n  Config: auth.conf\n\nPluginMgr:\n  ## Provides !plugin list/load/unload/reload\n  Module: Cobalt::Plugin::PluginMgr\n  Opts:\n    LevelRequired: 9999\n\n#Info3:\n#  ## Info/conversational response plugin:\n#  Module: Cobalt::Plugin::Info3\n#  Config: plugins/info3.conf\n\n#RDB:\n#  ## RDB/'randstuff' plugin -- often used for quotebots, etc\n#  Module: Cobalt::Plugin::RDB\n#  Config: plugins/randstuff.conf\n\nAlarmclock:\n  ## Alarmclock plugin; issue a highlighted message at specified time\n  ## (e.g. !alarmclock 20m do some stuff)\n  Module: Cobalt::Plugin::Alarmclock\n  Opts:\n    ## Available to level 1+ by default\n    LevelRequired: 1\n\nTempConv:\n  Module: Cobalt::Plugin::Extras::TempConv\n","channels.conf":"---\n## cobalt2 channels.conf\n\n## May be overwritten if using ChanMgr plugin.\nMain:\n  '%CHAN%':\n    password: ~\n    notify_on_sync: 1\n    autoop: 1\n    rdb_randstuffs: 1\n    info3_response: 1  \n\n## Some examples:\n#  '#otw':\n#    password: ~\n#    # defaults to NotifyOnSync value in cobalt.conf:\n#    notify_on_sync: 0\n#    autoop: 1\n#    rdb_randstuffs: 1\n#    info3_response: 1\n#  '#eris':\n#    password: ~\n#    autoop: 1\n#    rdb_randstuffs: 1\n#    info_response: 1\n\n\n","langs/ebonics.yml":""}