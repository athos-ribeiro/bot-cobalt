#!perl

my $VERSION = 2;

use v5.10;
use strictures 1;

use List::Objects::WithUtils;
use Path::Tiny;

use Scalar::Util    'blessed', 'reftype';
use File::ShareDir  'dist_dir';

use Bot::Cobalt::Utils 'rplprintf', 'mkpasswd';
use Bot::Cobalt::Frontend::Utils ':all';
use Bot::Cobalt::Frontend::RC    'rc_read', 'rc_write';


my $Rcfile = path(
  $ENV{HOME} ? $ENV{HOME} . '/.cobalt2rc' : '.cobalt2rc'
);

use Getopt::Long;
GetOptions(
  'config|rcfile=s' => \$Rcfile,

  version => sub {
    say "Bot::Cobalt installer (version $VERSION)";
    exit 0
  },

  help    => sub {
    print map "$_\n",
      "  --config / --rcfile=PATH",
      "    [default: $Rcfile]"
    ;
    exit 0
  },
);


sub read_format_write {
  my ($path, $vars) = @_;
  die "Expected Path::Tiny but got $path"
    unless blessed $path && $path->isa('Path::Tiny');
  die "Expected HASH of template var replacements but got $vars"
    unless reftype $vars eq 'HASH';

  my $in = $path->slurp_utf8;
  my $out = rplprintf($in, $vars);
  $path->spew_utf8($out);
  $path
}



sub build_dir_skeleton {
  my ($base, $etc, $var) = @_;
  die "Expected a base Path object but got $path"
    unless blessed $path && $path->isa('Path::Tiny');

  $etc = path( $base . '/etc' ) unless $etc;
  $var = path( $base . '/var' ) unless $var;
  my $dbpath = path( $var . '/db' );
  $_->mkpath for $etc, $var, $dbpath;

  hash( base => $base, etc => $etc, var => $var )->inflate
}


sub copy_base_confs {
  my $shared_etc = path(
    dist_dir('Bot-Cobalt') . '/etc'
  );

  die "Could not locate ShareDir at $shared_etc"
    unless $shared_etc->exists;

  # FIXME verify & copy from sharedir
}


sub non_interactive {
  # FIXME set up some default var replacements
}


sub interactive_intro {
  say $_ for
    "This is the Bot::Cobalt install helper.",
    "This script will create a cobalt2rc file specifying the bot's paths.",
    "It will also help initialize some starter configuration files.",
    "",
    "Press ENTER to continue, Ctrl+C to quit." ;

  readline STDIN;
}

sub interactive_rcfile {
  say $_ for 
    "The default rcfile location is:",
    " $Rcfile" ;
  $Rcfile = ask_question( prompt => 'Path to rcfile' ) if ask_yesno(
    prompt  => 'Enter a different rcfile location?',
    default => 'n',
  );

  say "Installing rcfile to $Rcfile";

  say $_ for
    "Bot::Cobalt needs a place to store config and variable data.",
    "This can be any path writable by the user running the bot.",
    "(If it doesn't exist, we will attempt to create it.)" ;
  my $default_basedir = $ENV{HOME} ? $ENV{HOME} . '/cobalt2' : './cobalt2' ;
  my $basedir_ans = ask_question(
    prompt  => 'Base directory',
    default => $default_basedir,
  );
  my $basedir = path($basedir_ans);



  # FIXME call rc write
  # FIXME do skeleton dir prep, copy_base_confs
}

sub interactive_cobaltcf {
  my ($conf_replacements) = @_;
}

sub interactive_channelscf {
  my ($conf_replacements) = @_;
}

sub interactive_authcf {
  my ($conf_replacements) = @_;
}


sub interactive {
  my @refs = (
    &interactive_intro,
    &interactive_rcfile,
    &interactive_cobaltcf,
    &interactive_channelscf,
    &interactive_authcf,
  );

  my $conf_replacements = hash(
    cobalt    => hash,
    channels  => hash,
    auth      => hash,
  );
  $_->($conf_replacements) for @refs;

  for my $kv ($conf_replacements->kv->all) {
    my ($path_prefix, $repl_hash) = @$kv;
    # FIXME iterate $conf_replacements, call read_format_write
  }
}





## FIXME
##   should be able to install non-interactively (template replacement
##   defaults)
##
##   interactive mode needs to cover:
##    - rcfile placement
##      * default to $Rcfile
##      * prompt if overwriting
##    - cobalt basedir
##      * default to $HOME/cobalt2
##      * prompt if exists and populated
##    - cobalt.conf
##      * CFG_BOT_NICK, CFG_BOT_USERNAME, CFG_BOT_REALNAME
##      * CFG_CMD_CHAR
##      * CFG_SERVER_ADDR
##      * CFG_USE_SSL
##      * CFG_SERVER_PORT
##    - channels.conf
##      * CHAN
##      * ??
##    - auth.conf
##      * AUTH_USER
##      * AUTH_PASS  (Termios turn off echo)
##      * AUTH_MASK
##      * ability to add more users?
##
##   installation should populate:
##    - $Rcfile
##    - $basedir/etc/ by copying from ShareDir
##    - template replacement for:
##      * cobalt.conf
##      * channels.conf
##      * auth.conf
##      * write as we go?
##    - $basedir/var/db [empty]

